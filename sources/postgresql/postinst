#!/bin/sh

export PATH=/opt/bin:/opt/sbin:$PATH

pghome="/opt/var/pgsql"
pgdata="$pghome/data"
pgver="$pghome/8.2"
pgdumpground="$pgver/dump"


echo ""
echo "POSTGRESQL POSTINST"
echo "==================="

if [ ! -d $pghome ]
then
    mkdir -p $pghome
fi
if [ ! -d $pgdumpground ]
then
    mkdir -p $pgdumpground
fi

# initdb if not done before
#
dbinited=0
if [ -d $pgdata ]; then
    echo The $pgdata directory already exists
    dbinited=1
else
    echo "Initialize database ... "
    /opt/bin/initdb -D "$pgdata"
    [ -f $pgdata/PG_VERSION ] && echo "... database initialization done"
    dbinited=1
fi

# Start the database server
#
echo "Starting database server"
/opt/bin/postmaster -D /opt/var/pgsql/data &


if [ "$dbinited." = "1." -a -n "`pidof postmaster`" ]; then
    echo "Now database server is ready, you can test the connection by:"
    echo "	# su - postgres"
    echo "	$ /opt/bin/psql template1"
    echo "To allow access from other user, see http://www.postgresql.org/docs/8.2/interactive/sql-createuser.html"
    echo "To allow access from network, see http://developer.postgresql.org/docs/postgres/runtime-config.html#RUNTIME-CONFIG-CONNECTION"
fi

# Waiting for database server to be available

wait_count=20

pg_ctl status -D $pgdata
pg_running=$?

while [ ${pg_running} -ne 0 ] && [ ${wait_count} -ne 0 ]
do
    echo "Database not running, waiting..."
    sleep 0.5
    pg_ctl status -D $pgdata
    pg_running=$?
    wait_count=$(expr $wait_count - 1)
done

# Exit if we have failed
#
if [ $wait_count -eq 0 ]; then
    echo "Failed to start database in Postgres Postinst"
    exit 1
fi

# Now loop waiting to see if we can connect via psql
#
psql_status=3
count=20
echo "Waiting for database server to accept connections"
while [ ${psql_status} -ne 0 ] && [ ${count} -ne 0 ]
do
    echo "${count} iterations left"
    echo "Checking database connection status... localhost"
    psql -h localhost -U calnex -d postgres -c "SELECT * FROM pg_catalog.pg_tables;" > /dev/null
    psql_status=$?
    echo "    psql status ${psql_status}"
    sleep 0.5

    count=$(expr $count - 1)
done

echo "Database now accepting connections"

# Tidy up the database state
#
psql -h localhost -U calnex -d postgres -c "UPDATE pg_database SET datistemplate = FALSE WHERE datname = 'template1';"
psql -h localhost -U calnex -d postgres -c "DROP DATABASE template1;"
psql -h localhost -U calnex -d postgres -c "CREATE DATABASE template1 WITH TEMPLATE = template0 ENCODING = 'UNICODE';"
psql -h localhost -U calnex -d postgres -c "UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template1';"
psql -h localhost -U calnex -d template1 -c "VACUUM FREEZE;"

# And stop the server
#
/opt/etc/init.d/S95postgresql stop