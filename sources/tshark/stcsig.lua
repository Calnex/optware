-- stcsig.lua
-- version 1.0
-- written by Naoyoshi Ueda
-- 
-- Wireshark dissector routine for SpirentTestCenter signature field.

local stcsig_p = Proto("stcsig", "Spirent Signature Field")
local scrambled_sig_f = ProtoField.bytes("stcsig.scrambled_sig", "Scrambled Signature")
local signature_f = ProtoField.bytes("stcsig.sig", "Signature")
local seqbyte_f = ProtoField.bytes("stcsig.seqbyte", "Complement of Sequence Byte")
local csp_f = ProtoField.uint16("stcsig.csp", "ChassisSlotPort")
local stream_type_f = ProtoField.uint8("stcsig.streamtype", "Stream Type", 1, {[0] = "Soft Stream", [1] = "Hard Stream"}, 0x80)
local stream_index_f = ProtoField.uint16("stcsig.streamindex", "Stream Index", base.DEC, nil, 0x7fff)
local stream_id_f = ProtoField.uint32("stcsig.streamid", "Stream ID", base.DEC)
local detect_f = ProtoField.uint16("stcsig.detect", "Bytes for Enhanced Detection", base.HEX)
local seqnum_f = ProtoField.uint64("stcsig.seqnum", "Sequence Number", base.DEC, nil, 0x0000ffffffffffff)
local timestamp_f = ProtoField.relative_time("stcsig.timestamp", "Timestamp")
local flags_f = ProtoField.uint8("stcsig.flags", "Flags", base.HEX, nil)
local prbs_f = ProtoField.uint8("stcsig.prbseq", "Pseudo-Random Binary Sequence", 1, {[0] = "PRBS is not used", [1] = "PRBS is used"}, 0x02)
local tslr_f = ProtoField.uint8("stcsig.tslr", "Timestamp Location Reference", 1, {[0] = "StartOfFrame", [1] = "EndOfFrame"}, 0x01)
local crc_f = ProtoField.uint16("stcsig.crc", "CRC", base.HEX)
local cheater_f = ProtoField.uint16("stcsig.cheater", "Checksum Cheater", base.HEX)
local est_latency_f = ProtoField.relative_time("stcsig.est_latency", "Estimated Latency")

local eth_fcs_f = Field.new("eth.fcs")
local frame_time_epoch_f = Field.new("frame.time_epoch")
local stcsig_total_len = 20;

stcsig_p.fields = {scrambled_sig_f, signature_f, seqbyte_f, csp_f, stream_type_f, stream_index_f, stream_id_f, detect_f, seqnum_f, timestamp_f, flags_f, prbs_f, tslr_f, crc_f, cheater_f, est_latency_f}

register_postdissector(stcsig_p)

local crctable = {
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
    0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
    0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
    0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
    0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
    0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
    0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
    0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
    
    0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
    0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
    0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
    0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
    0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
    0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
    0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
    
    0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
    0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
    0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
    0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
    0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
    0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
    0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
    
    0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
    0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
    0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
    0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
    0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
    0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0,
}

local function crcccitt(tvb)
	local crc = 0xffff
	for i = 0, tvb:len() -1 do
		crc = bit.bxor(crctable[bit.bxor(bit.rshift(crc, 8), tvb(i, 1):uint()) +1], bit.lshift(crc, 8))
		crc = bit.band(crc, 0xffff)
	end
	return crc
end

local operands_table = {
{0x00000000, 0x00000000, 0x00000000, 0x00000000},
{0x0071DE2C, 0xD879C2BF, 0xCBD286ED, 0xF5D06551},
{0x00E3BC59, 0xB0F3857F, 0x97A50DDB, 0xEBA0CAA3},
{0x00926275, 0x688A47C0, 0x5C778B36, 0x1E70AFF2},
{0x00B6A69F, 0xB99EC840, 0xE4989D5A, 0x2291F017},
{0x00C778B3, 0x61E70AFF, 0x2F4A1BB7, 0xD7419546},
{0x00551AC6, 0x096D4D3F, 0x733D9081, 0xC9313AB4},
{0x0024C4EA, 0xD1148F80, 0xB8EF166C, 0x3CE15FE5},
{0x001C9313, 0xAB44523E, 0x02E3BC59, 0xB0F3857F},
{0x006D4D3F, 0x733D9081, 0xC9313AB4, 0x4523E02E},
{0x00FF2F4A, 0x1BB7D741, 0x9546B182, 0x5B534FDC},
{0x008EF166, 0xC3CE15FE, 0x5E94376F, 0xAE832A8D},
{0x00AA358C, 0x12DA9A7E, 0xE67B2103, 0x92627568},
{0x00DBEBA0, 0xCAA358C1, 0x2DA9A7EE, 0x67B21039},
{0x004989D5, 0xA2291F01, 0x71DE2CD8, 0x79C2BFCB},
{0x003857F9, 0x7A50DDBE, 0xBA0CAA35, 0x8C12DA9A},
{0x00392627, 0x5688A47C, 0x05C778B3, 0x61E70AFF},
{0x0048F80B, 0x8EF166C3, 0xCE15FE5E, 0x94376FAE},
{0x00DA9A7E, 0xE67B2103, 0x92627568, 0x8A47C05C},
{0x00AB4452, 0x3E02E3BC, 0x59B0F385, 0x7F97A50D},
{0x008F80B8, 0xEF166C3C, 0xE15FE5E9, 0x4376FAE8},
{0x00FE5E94, 0x376FAE83, 0x2A8D6304, 0xB6A69FB9},
{0x006C3CE1, 0x5FE5E943, 0x76FAE832, 0xA8D6304B},
{0x001DE2CD, 0x879C2BFC, 0xBD286EDF, 0x5D06551A},
{0x0025B534, 0xFDCCF642, 0x0724C4EA, 0xD1148F80},
{0x00546B18, 0x25B534FD, 0xCCF64207, 0x24C4EAD1},
{0x00C6096D, 0x4D3F733D, 0x9081C931, 0x3AB44523},
{0x00B7D741, 0x9546B182, 0x5B534FDC, 0xCF642072},
{0x009313AB, 0x44523E02, 0xE3BC59B0, 0xF3857F97},
{0x00E2CD87, 0x9C2BFCBD, 0x286EDF5D, 0x06551AC6},
{0x0070AFF2, 0xF4A1BB7D, 0x7419546B, 0x1825B534},
{0x000171DE, 0x2CD879C2, 0xBFCBD286, 0xEDF5D065},
{0x00724C4E, 0xAD1148F8, 0x0B8EF166, 0xC3CE15FE},
{0x00039262, 0x75688A47, 0xC05C778B, 0x361E70AF},
{0x0091F017, 0x1DE2CD87, 0x9C2BFCBD, 0x286EDF5D},
{0x00E02E3B, 0xC59B0F38, 0x57F97A50, 0xDDBEBA0C},
{0x00C4EAD1, 0x148F80B8, 0xEF166C3C, 0xE15FE5E9},
{0x00B534FD, 0xCCF64207, 0x24C4EAD1, 0x148F80B8},
{0x00275688, 0xA47C05C7, 0x78B361E7, 0x0AFF2F4A},
{0x005688A4, 0x7C05C778, 0xB361E70A, 0xFF2F4A1B},
{0x006EDF5D, 0x06551AC6, 0x096D4D3F, 0x733D9081},
{0x001F0171, 0xDE2CD879, 0xC2BFCBD2, 0x86EDF5D0},
{0x008D6304, 0xB6A69FB9, 0x9EC840E4, 0x989D5A22},
{0x00FCBD28, 0x6EDF5D06, 0x551AC609, 0x6D4D3F73},
{0x00D879C2, 0xBFCBD286, 0xEDF5D065, 0x51AC6096},
{0x00A9A7EE, 0x67B21039, 0x26275688, 0xA47C05C7},
{0x003BC59B, 0x0F3857F9, 0x7A50DDBE, 0xBA0CAA35},
{0x004A1BB7, 0xD7419546, 0xB1825B53, 0x4FDCCF64},
{0x004B6A69, 0xFB99EC84, 0x0E4989D5, 0xA2291F01},
{0x003AB445, 0x23E02E3B, 0xC59B0F38, 0x57F97A50},
{0x00A8D630, 0x4B6A69FB, 0x99EC840E, 0x4989D5A2},
{0x00D9081C, 0x9313AB44, 0x523E02E3, 0xBC59B0F3},
{0x00FDCCF6, 0x420724C4, 0xEAD1148F, 0x80B8EF16},
{0x008C12DA, 0x9A7EE67B, 0x21039262, 0x75688A47},
{0x001E70AF, 0xF2F4A1BB, 0x7D741954, 0x6B1825B5},
{0x006FAE83, 0x2A8D6304, 0xB6A69FB9, 0x9EC840E4},
{0x0057F97A, 0x50DDBEBA, 0x0CAA358C, 0x12DA9A7E},
{0x00262756, 0x88A47C05, 0xC778B361, 0xE70AFF2F},
{0x00B44523, 0xE02E3BC5, 0x9B0F3857, 0xF97A50DD},
{0x00C59B0F, 0x3857F97A, 0x50DDBEBA, 0x0CAA358C},
{0x00E15FE5, 0xE94376FA, 0xE832A8D6, 0x304B6A69},
{0x009081C9, 0x313AB445, 0x23E02E3B, 0xC59B0F38},
{0x0002E3BC, 0x59B0F385, 0x7F97A50D, 0xDBEBA0CA},
{0x00733D90, 0x81C9313A, 0xB44523E0, 0x2E3BC59B},
{0x00E4989D, 0x5A2291F0, 0x171DE2CD, 0x879C2BFC},
{0x009546B1, 0x825B534F, 0xDCCF6420, 0x724C4EAD},
{0x000724C4, 0xEAD1148F, 0x80B8EF16, 0x6C3CE15F},
{0x0076FAE8, 0x32A8D630, 0x4B6A69FB, 0x99EC840E},
{0x00523E02, 0xE3BC59B0, 0xF3857F97, 0xA50DDBEB},
{0x0023E02E, 0x3BC59B0F, 0x3857F97A, 0x50DDBEBA},
{0x00B1825B, 0x534FDCCF, 0x6420724C, 0x4EAD1148},
{0x00C05C77, 0x8B361E70, 0xAFF2F4A1, 0xBB7D7419},
{0x00F80B8E, 0xF166C3CE, 0x15FE5E94, 0x376FAE83},
{0x0089D5A2, 0x291F0171, 0xDE2CD879, 0xC2BFCBD2},
{0x001BB7D7, 0x419546B1, 0x825B534F, 0xDCCF6420},
{0x006A69FB, 0x99EC840E, 0x4989D5A2, 0x291F0171},
{0x004EAD11, 0x48F80B8E, 0xF166C3CE, 0x15FE5E94},
{0x003F733D, 0x9081C931, 0x3AB44523, 0xE02E3BC5},
{0x00AD1148, 0xF80B8EF1, 0x66C3CE15, 0xFE5E9437},
{0x00DCCF64, 0x20724C4E, 0xAD1148F8, 0x0B8EF166},
{0x00DDBEBA, 0x0CAA358C, 0x12DA9A7E, 0xE67B2103},
{0x00AC6096, 0xD4D3F733, 0xD9081C93, 0x13AB4452},
{0x003E02E3, 0xBC59B0F3, 0x857F97A5, 0x0DDBEBA0},
{0x004FDCCF, 0x6420724C, 0x4EAD1148, 0xF80B8EF1},
{0x006B1825, 0xB534FDCC, 0xF6420724, 0xC4EAD114},
{0x001AC609, 0x6D4D3F73, 0x3D9081C9, 0x313AB445},
{0x0088A47C, 0x05C778B3, 0x61E70AFF, 0x2F4A1BB7},
{0x00F97A50, 0xDDBEBA0C, 0xAA358C12, 0xDA9A7EE6},
{0x00C12DA9, 0xA7EE67B2, 0x10392627, 0x5688A47C},
{0x00B0F385, 0x7F97A50D, 0xDBEBA0CA, 0xA358C12D},
{0x002291F0, 0x171DE2CD, 0x879C2BFC, 0xBD286EDF},
{0x00534FDC, 0xCF642072, 0x4C4EAD11, 0x48F80B8E},
{0x00778B36, 0x1E70AFF2, 0xF4A1BB7D, 0x7419546B},
{0x0006551A, 0xC6096D4D, 0x3F733D90, 0x81C9313A},
{0x0094376F, 0xAE832A8D, 0x6304B6A6, 0x9FB99EC8},
{0x00E5E943, 0x76FAE832, 0xA8D6304B, 0x6A69FB99},
{0x0096D4D3, 0xF733D908, 0x1C9313AB, 0x44523E02},
{0x00E70AFF, 0x2F4A1BB7, 0xD7419546, 0xB1825B53},
{0x0075688A, 0x47C05C77, 0x8B361E70, 0xAFF2F4A1},
{0x0004B6A6, 0x9FB99EC8, 0x40E4989D, 0x5A2291F0},
{0x0020724C, 0x4EAD1148, 0xF80B8EF1, 0x66C3CE15},
{0x0051AC60, 0x96D4D3F7, 0x33D9081C, 0x9313AB44},
{0x00C3CE15, 0xFE5E9437, 0x6FAE832A, 0x8D6304B6},
{0x00B21039, 0x26275688, 0xA47C05C7, 0x78B361E7},
{0x008A47C0, 0x5C778B36, 0x1E70AFF2, 0xF4A1BB7D},
{0x00FB99EC, 0x840E4989, 0xD5A2291F, 0x0171DE2C},
{0x0069FB99, 0xEC840E49, 0x89D5A229, 0x1F0171DE},
{0x001825B5, 0x34FDCCF6, 0x420724C4, 0xEAD1148F},
{0x003CE15F, 0xE5E94376, 0xFAE832A8, 0xD6304B6A},
{0x004D3F73, 0x3D9081C9, 0x313AB445, 0x23E02E3B},
{0x00DF5D06, 0x551AC609, 0x6D4D3F73, 0x3D9081C9},
{0x00AE832A, 0x8D6304B6, 0xA69FB99E, 0xC840E498},
{0x00AFF2F4, 0xA1BB7D74, 0x19546B18, 0x25B534FD},
{0x00DE2CD8, 0x79C2BFCB, 0xD286EDF5, 0xD06551AC},
{0x004C4EAD, 0x1148F80B, 0x8EF166C3, 0xCE15FE5E},
{0x003D9081, 0xC9313AB4, 0x4523E02E, 0x3BC59B0F},
{0x0019546B, 0x1825B534, 0xFDCCF642, 0x0724C4EA},
{0x00688A47, 0xC05C778B, 0x361E70AF, 0xF2F4A1BB},
{0x00FAE832, 0xA8D6304B, 0x6A69FB99, 0xEC840E49},
{0x008B361E, 0x70AFF2F4, 0xA1BB7D74, 0x19546B18},
{0x00B361E7, 0x0AFF2F4A, 0x1BB7D741, 0x9546B182},
{0x00C2BFCB, 0xD286EDF5, 0xD06551AC, 0x6096D4D3},
{0x0050DDBE, 0xBA0CAA35, 0x8C12DA9A, 0x7EE67B21},
{0x00210392, 0x6275688A, 0x47C05C77, 0x8B361E70},
{0x0005C778, 0xB361E70A, 0xFF2F4A1B, 0xB7D74195},
{0x00741954, 0x6B1825B5, 0x34FDCCF6, 0x420724C4},
{0x00E67B21, 0x03926275, 0x688A47C0, 0x5C778B36},
{0x0097A50D, 0xDBEBA0CA, 0xA358C12D, 0xA9A7EE67},
{0x00B8EF16, 0x6C3CE15F, 0xE5E94376, 0xFAE832A8},
{0x00C9313A, 0xB44523E0, 0x2E3BC59B, 0x0F3857F9},
{0x005B534F, 0xDCCF6420, 0x724C4EAD, 0x1148F80B},
{0x002A8D63, 0x04B6A69F, 0xB99EC840, 0xE4989D5A},
{0x000E4989, 0xD5A2291F, 0x0171DE2C, 0xD879C2BF},
{0x007F97A5, 0x0DDBEBA0, 0xCAA358C1, 0x2DA9A7EE},
{0x00EDF5D0, 0x6551AC60, 0x96D4D3F7, 0x33D9081C},
{0x009C2BFC, 0xBD286EDF, 0x5D06551A, 0xC6096D4D},
{0x00A47C05, 0xC778B361, 0xE70AFF2F, 0x4A1BB7D7},
{0x00D5A229, 0x1F0171DE, 0x2CD879C2, 0xBFCBD286},
{0x0047C05C, 0x778B361E, 0x70AFF2F4, 0xA1BB7D74},
{0x00361E70, 0xAFF2F4A1, 0xBB7D7419, 0x546B1825},
{0x0012DA9A, 0x7EE67B21, 0x03926275, 0x688A47C0},
{0x006304B6, 0xA69FB99E, 0xC840E498, 0x9D5A2291},
{0x00F166C3, 0xCE15FE5E, 0x94376FAE, 0x832A8D63},
{0x0080B8EF, 0x166C3CE1, 0x5FE5E943, 0x76FAE832},
{0x0081C931, 0x3AB44523, 0xE02E3BC5, 0x9B0F3857},
{0x00F0171D, 0xE2CD879C, 0x2BFCBD28, 0x6EDF5D06},
{0x00627568, 0x8A47C05C, 0x778B361E, 0x70AFF2F4},
{0x0013AB44, 0x523E02E3, 0xBC59B0F3, 0x857F97A5},
{0x00376FAE, 0x832A8D63, 0x04B6A69F, 0xB99EC840},
{0x0046B182, 0x5B534FDC, 0xCF642072, 0x4C4EAD11},
{0x00D4D3F7, 0x33D9081C, 0x9313AB44, 0x523E02E3},
{0x00A50DDB, 0xEBA0CAA3, 0x58C12DA9, 0xA7EE67B2},
{0x009D5A22, 0x91F0171D, 0xE2CD879C, 0x2BFCBD28},
{0x00EC840E, 0x4989D5A2, 0x291F0171, 0xDE2CD879},
{0x007EE67B, 0x21039262, 0x75688A47, 0xC05C778B},
{0x000F3857, 0xF97A50DD, 0xBEBA0CAA, 0x358C12DA},
{0x002BFCBD, 0x286EDF5D, 0x06551AC6, 0x096D4D3F},
{0x005A2291, 0xF0171DE2, 0xCD879C2B, 0xFCBD286E},
{0x00C840E4, 0x989D5A22, 0x91F0171D, 0xE2CD879C},
{0x00B99EC8, 0x40E4989D, 0x5A2291F0, 0x171DE2CD},
{0x00CAA358, 0xC12DA9A7, 0xEE67B210, 0x39262756},
{0x00BB7D74, 0x19546B18, 0x25B534FD, 0xCCF64207},
{0x00291F01, 0x71DE2CD8, 0x79C2BFCB, 0xD286EDF5},
{0x0058C12D, 0xA9A7EE67, 0xB2103926, 0x275688A4},
{0x007C05C7, 0x78B361E7, 0x0AFF2F4A, 0x1BB7D741},
{0x000DDBEB, 0xA0CAA358, 0xC12DA9A7, 0xEE67B210},
{0x009FB99E, 0xC840E498, 0x9D5A2291, 0xF0171DE2},
{0x00EE67B2, 0x10392627, 0x5688A47C, 0x05C778B3},
{0x00D6304B, 0x6A69FB99, 0xEC840E49, 0x89D5A229},
{0x00A7EE67, 0xB2103926, 0x275688A4, 0x7C05C778},
{0x00358C12, 0xDA9A7EE6, 0x7B210392, 0x6275688A},
{0x0044523E, 0x02E3BC59, 0xB0F3857F, 0x97A50DDB},
{0x006096D4, 0xD3F733D9, 0x081C9313, 0xAB44523E},
{0x001148F8, 0x0B8EF166, 0xC3CE15FE, 0x5E94376F},
{0x00832A8D, 0x6304B6A6, 0x9FB99EC8, 0x40E4989D},
{0x00F2F4A1, 0xBB7D7419, 0x546B1825, 0xB534FDCC},
{0x00F3857F, 0x97A50DDB, 0xEBA0CAA3, 0x58C12DA9},
{0x00825B53, 0x4FDCCF64, 0x20724C4E, 0xAD1148F8},
{0x00103926, 0x275688A4, 0x7C05C778, 0xB361E70A},
{0x0061E70A, 0xFF2F4A1B, 0xB7D74195, 0x46B1825B},
{0x004523E0, 0x2E3BC59B, 0x0F3857F9, 0x7A50DDBE},
{0x0034FDCC, 0xF6420724, 0xC4EAD114, 0x8F80B8EF},
{0x00A69FB9, 0x9EC840E4, 0x989D5A22, 0x91F0171D},
{0x00D74195, 0x46B1825B, 0x534FDCCF, 0x6420724C},
{0x00EF166C, 0x3CE15FE5, 0xE94376FA, 0xE832A8D6},
{0x009EC840, 0xE4989D5A, 0x2291F017, 0x1DE2CD87},
{0x000CAA35, 0x8C12DA9A, 0x7EE67B21, 0x03926275},
{0x007D7419, 0x546B1825, 0xB534FDCC, 0xF6420724},
{0x0059B0F3, 0x857F97A5, 0x0DDBEBA0, 0xCAA358C1},
{0x00286EDF, 0x5D06551A, 0xC6096D4D, 0x3F733D90},
{0x00BA0CAA, 0x358C12DA, 0x9A7EE67B, 0x21039262},
{0x00CBD286, 0xEDF5D065, 0x51AC6096, 0xD4D3F733},
{0x005C778B, 0x361E70AF, 0xF2F4A1BB, 0x7D741954},
{0x002DA9A7, 0xEE67B210, 0x39262756, 0x88A47C05},
{0x00BFCBD2, 0x86EDF5D0, 0x6551AC60, 0x96D4D3F7},
{0x00CE15FE, 0x5E94376F, 0xAE832A8D, 0x6304B6A6},
{0x00EAD114, 0x8F80B8EF, 0x166C3CE1, 0x5FE5E943},
{0x009B0F38, 0x57F97A50, 0xDDBEBA0C, 0xAA358C12},
{0x00096D4D, 0x3F733D90, 0x81C9313A, 0xB44523E0},
{0x0078B361, 0xE70AFF2F, 0x4A1BB7D7, 0x419546B1},
{0x0040E498, 0x9D5A2291, 0xF0171DE2, 0xCD879C2B},
{0x00313AB4, 0x4523E02E, 0x3BC59B0F, 0x3857F97A},
{0x00A358C1, 0x2DA9A7EE, 0x67B21039, 0x26275688},
{0x00D286ED, 0xF5D06551, 0xAC6096D4, 0xD3F733D9},
{0x00F64207, 0x24C4EAD1, 0x148F80B8, 0xEF166C3C},
{0x00879C2B, 0xFCBD286E, 0xDF5D0655, 0x1AC6096D},
{0x0015FE5E, 0x94376FAE, 0x832A8D63, 0x04B6A69F},
{0x00642072, 0x4C4EAD11, 0x48F80B8E, 0xF166C3CE},
{0x006551AC, 0x6096D4D3, 0xF733D908, 0x1C9313AB},
{0x00148F80, 0xB8EF166C, 0x3CE15FE5, 0xE94376FA},
{0x0086EDF5, 0xD06551AC, 0x6096D4D3, 0xF733D908},
{0x00F733D9, 0x081C9313, 0xAB44523E, 0x02E3BC59},
{0x00D3F733, 0xD9081C93, 0x13AB4452, 0x3E02E3BC},
{0x00A2291F, 0x0171DE2C, 0xD879C2BF, 0xCBD286ED},
{0x00304B6A, 0x69FB99EC, 0x840E4989, 0xD5A2291F},
{0x00419546, 0xB1825B53, 0x4FDCCF64, 0x20724C4E},
{0x0079C2BF, 0xCBD286ED, 0xF5D06551, 0xAC6096D4},
{0x00081C93, 0x13AB4452, 0x3E02E3BC, 0x59B0F385},
{0x009A7EE6, 0x7B210392, 0x6275688A, 0x47C05C77},
{0x00EBA0CA, 0xA358C12D, 0xA9A7EE67, 0xB2103926},
{0x00CF6420, 0x724C4EAD, 0x1148F80B, 0x8EF166C3},
{0x00BEBA0C, 0xAA358C12, 0xDA9A7EE6, 0x7B210392},
{0x002CD879, 0xC2BFCBD2, 0x86EDF5D0, 0x6551AC60},
{0x005D0655, 0x1AC6096D, 0x4D3F733D, 0x9081C931},
{0x002E3BC5, 0x9B0F3857, 0xF97A50DD, 0xBEBA0CAA},
{0x005FE5E9, 0x4376FAE8, 0x32A8D630, 0x4B6A69FB},
{0x00CD879C, 0x2BFCBD28, 0x6EDF5D06, 0x551AC609},
{0x00BC59B0, 0xF3857F97, 0xA50DDBEB, 0xA0CAA358},
{0x00989D5A, 0x2291F017, 0x1DE2CD87, 0x9C2BFCBD},
{0x00E94376, 0xFAE832A8, 0xD6304B6A, 0x69FB99EC},
{0x007B2103, 0x92627568, 0x8A47C05C, 0x778B361E},
{0x000AFF2F, 0x4A1BB7D7, 0x419546B1, 0x825B534F},
{0x0032A8D6, 0x304B6A69, 0xFB99EC84, 0x0E4989D5},
{0x004376FA, 0xE832A8D6, 0x304B6A69, 0xFB99EC84},
{0x00D1148F, 0x80B8EF16, 0x6C3CE15F, 0xE5E94376},
{0x00A0CAA3, 0x58C12DA9, 0xA7EE67B2, 0x10392627},
{0x00840E49, 0x89D5A229, 0x1F0171DE, 0x2CD879C2},
{0x00F5D065, 0x51AC6096, 0xD4D3F733, 0xD9081C93},
{0x0067B210, 0x39262756, 0x88A47C05, 0xC778B361},
{0x00166C3C, 0xE15FE5E9, 0x4376FAE8, 0x32A8D630},
{0x00171DE2, 0xCD879C2B, 0xFCBD286E, 0xDF5D0655},
{0x0066C3CE, 0x15FE5E94, 0x376FAE83, 0x2A8D6304},
{0x00F4A1BB, 0x7D741954, 0x6B1825B5, 0x34FDCCF6},
{0x00857F97, 0xA50DDBEB, 0xA0CAA358, 0xC12DA9A7},
{0x00A1BB7D, 0x7419546B, 0x1825B534, 0xFDCCF642},
{0x00D06551, 0xAC6096D4, 0xD3F733D9, 0x081C9313},
{0x00420724, 0xC4EAD114, 0x8F80B8EF, 0x166C3CE1},
{0x0033D908, 0x1C9313AB, 0x44523E02, 0xE3BC59B0},
{0x000B8EF1, 0x66C3CE15, 0xFE5E9437, 0x6FAE832A},
{0x007A50DD, 0xBEBA0CAA, 0x358C12DA, 0x9A7EE67B},
{0x00E832A8, 0xD6304B6A, 0x69FB99EC, 0x840E4989},
{0x0099EC84, 0x0E4989D5, 0xA2291F01, 0x71DE2CD8},
{0x00BD286E, 0xDF5D0655, 0x1AC6096D, 0x4D3F733D},
{0x00CCF642, 0x0724C4EA, 0xD1148F80, 0xB8EF166C},
{0x005E9437, 0x6FAE832A, 0x8D6304B6, 0xA69FB99E},
{0x002F4A1B, 0xB7D74195, 0x46B1825B, 0x534FDCCF}
}

function stcsig_p.dissector(tvb, pinfo, tree)
	local eth_fcs = eth_fcs_f()
	local frame_time_epoch = frame_time_epoch_f().label
	local stt_pos = tvb:len() - stcsig_total_len
	if eth_fcs then
		stt_pos = stt_pos - eth_fcs.len
	end
	if crcccitt(tvb(stt_pos, 18)) ~= 0x1d0f then
		return
	end
	local subtree = tree:add(stcsig_p, tvb(stt_pos, stcsig_total_len), "Spirent Signature Field")
	subtree:add(scrambled_sig_f, tvb(stt_pos, stcsig_total_len))
	local operands = operands_table[tvb(stt_pos, 1):uint() + 1]
	local hexstr = string.format('%08x', bit.bxor(tvb(stt_pos, 4):uint(), operands[1]))
	hexstr = hexstr .. string.format('%08x', bit.bxor(tvb(stt_pos +4, 4):uint(), operands[2]))
	hexstr = hexstr .. string.format('%08x', bit.bxor(tvb(stt_pos +8, 4):uint(), operands[3]))
	hexstr = hexstr .. string.format('%08x', bit.bxor(tvb(stt_pos +12, 4):uint(), operands[4]))
	hexstr = hexstr .. string.format('%08x', tvb(stt_pos + 16, 4):uint())

	local decoded_sig = ByteArray.new(hexstr)
	local decoded_tvb = decoded_sig:tvb("Decoded Signature")
	local subtree2 = subtree:add(signature_f, decoded_tvb(0, 20))
	subtree2:add(seqbyte_f, decoded_tvb(0, 1))
	local subtree3 = subtree2:add(stream_id_f, decoded_tvb(1, 4))
	subtree3:add(csp_f, decoded_tvb(1, 2))
	subtree3:add(stream_type_f, decoded_tvb(3, 1))
	subtree3:add(stream_index_f, decoded_tvb(3, 2))
	if decoded_tvb(5, 2):uint() + decoded_tvb(7, 2):uint() == 0xffff then
		subtree2:add(detect_f, decoded_tvb(5, 2))
		local ti = subtree2:add(seqnum_f, decoded_tvb(7, 4))
		ti:append_text(" (Enhanced Detection Mode)")
	else
		local seqnum = decoded_tvb(5, 6):uint64()
		local ti = subtree2:add(seqnum_f, decoded_tvb(5, 6))
		ti:append_text(" (Long Sequence Number Mode)")
	end
	local timestamp_val = (bit.rshift(decoded_tvb(15, 1):uint(), 2)*4294967296 + decoded_tvb(11, 4):uint()) * 25
	local timestamp_sec = math.floor(timestamp_val/10000000000)
	local timestamp_nsec = math.floor((timestamp_val - timestamp_sec * 10000000000) / 10)
	local timestamp = NSTime(timestamp_sec, timestamp_nsec)
	subtree2:add(timestamp_f, decoded_tvb(11, 5), timestamp)
	local subtree3 = subtree2:add(flags_f, decoded_tvb(15, 1))
	subtree3:add(prbs_f, decoded_tvb(15, 1))
	subtree3:add(tslr_f, decoded_tvb(15, 1))
	subtree2:add(crc_f, decoded_tvb(16, 2))
	subtree2:add(cheater_f, decoded_tvb(18, 2))
	if stcsig_p.prefs.is_display_estimated_latency then
		local sec, frac = string.match(frame_time_epoch, "(%d+)%.(%d+)")
		local ts = NSTime(sec + 0, frac + 0)
		if (time_offset == nil) then
			local assumed_latency_of_first_frame = NSTime(0, stcsig_p.prefs.assumed_latency_of_first_frame)
			time_offset = ts - timestamp - assumed_latency_of_first_frame
		end
		local ti = subtree2:add(est_latency_f, ts - time_offset - timestamp)
		ti:set_generated()
--		subtree2:add_expert_info(PI_DEBUG, PI_NOTE, "ts=" .. tostring(ts) .. ", timestamp=" .. tostring(timestamp) .. ", time_offset=" .. tostring(time_offset) .. ", frame_time_epoch=" .. frame_time_epoch)
	end
end

time_offset = nil
stcsig_p.prefs.is_display_estimated_latency = Pref.bool("Display estimated latency", 1, "Calculate estimated frame latency using timestamps of pcap packet header and STC signature. Timestamp reference location of STC signatures must be set as \"Start Of Frame\" to calculate correctly.")
stcsig_p.prefs.assumed_latency_of_first_frame = Pref.uint("Assumed latency of first frame (ns)", 36800)

function stcsig_p.init()
	time_offset = nil
end
